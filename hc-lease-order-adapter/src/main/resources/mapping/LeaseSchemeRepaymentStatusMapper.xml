<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hc.lease.order.dao.LeaseSchemeRepaymentStatusMapper">
    <!--月供的状态、滞纳金的状态、挂靠费的状态、提前还款的状态、尾付的状态，一个合同的某一期对应的这几种款项只有一条记录，可能每一种款项会操作多次扣款，每次操作的状态都更新-->
    <resultMap id="BaseResultMap" type="com.hc.lease.order.model.LeaseSchemeRepaymentStatus">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="repayment_id" property="repaymentId" jdbcType="BIGINT"/>
        <result column="contract_id" property="contractId" jdbcType="BIGINT"/>
        <result column="type" property="type" jdbcType="INTEGER"/>
        <result column="payment_result" property="paymentResult" jdbcType="INTEGER"/>
        <result column="payment_result_msg" property="paymentResultMsg" jdbcType="VARCHAR"/>
        <result column="req_sn" property="reqSn" jdbcType="VARCHAR"/>
        <result column="sn" property="sn" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="create_by" property="createBy" jdbcType="BIGINT"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <result column="update_by" property="updateBy" jdbcType="BIGINT"/>
        <result column="totle_price" property="totlePrice" jdbcType="NUMERIC"/>
        <result column="pay_way" property="payWay" jdbcType="INTEGER"/>
    </resultMap>

    <resultMap id="findQueryTradeNewMap" type="com.hc.lease.order.vo.FindQueryTradeNewVo">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="repayment_id" property="repaymentId" jdbcType="BIGINT"/>
        <result column="contract_id" property="contractId" jdbcType="BIGINT"/>
        <result column="payment_result" property="paymentResult" jdbcType="INTEGER"/>
        <result column="req_sn" property="reqSn" jdbcType="VARCHAR"/>
        <result column="sn" property="sn" jdbcType="VARCHAR"/>
        <result column="type" property="type" jdbcType="INTEGER"/>
        <result column="allinpay_log_id" property="allinpayLogId" jdbcType="BIGINT"/>
        <result column="overdue_type" property="overdueType" jdbcType="INTEGER"/>
        <result column="pay_way" property="payWay" jdbcType="INTEGER"/>
        <result column="single_or_batch" property="singleOrBatch" jdbcType="INTEGER"/>
    </resultMap>

    <resultMap id="FindByPlateNumberAndRepaymentDateMap"
               type="com.hc.lease.order.vo.FindByPlateNumberAndRepaymentDateVo">
        <result column="contract_id" property="contractId" jdbcType="BIGINT"/>
        <result column="back_card_number" property="backCardNumber" jdbcType="VARCHAR"/>
        <result column="bank_phone" property="bankPhone" jdbcType="VARCHAR"/>
        <result column="price_limit" property="priceLimit" jdbcType="NUMERIC"/>
        <result column="day_price_limit" property="dayPriceLimit" jdbcType="NUMERIC"/>
        <result column="day_sum_limit" property="daySumLimit" jdbcType="INTEGER"/>
        <result column="is_sign" property="isSign" jdbcType="INTEGER"/>
        <result column="agrm_no" property="agrmNo" jdbcType="VARCHAR"/>
        <result column="repayment_id" property="repaymentId" jdbcType="BIGINT"/>
        <result column="repayment_status_id0" property="repaymentStatusId0" jdbcType="BIGINT"/>
        <result column="repayment_status_id2" property="repaymentStatusId2" jdbcType="BIGINT"/>
        <result column="payment_result0" property="paymentResult0" jdbcType="INTEGER"/>
        <result column="payment_result0" property="paymentResult2" jdbcType="INTEGER"/>
        <result column="totle_price0" property="totlePrice0" jdbcType="NUMERIC"/>
        <result column="totle_price2" property="totlePrice2" jdbcType="NUMERIC"/>
        <result column="repayment_date" property="repaymentDate" jdbcType="TIMESTAMP"/>
        <result column="overdue_rate" property="overdueRate" jdbcType="NUMERIC"/>
    </resultMap>

    <sql id="Base_Column_List">
    id, repayment_id, contract_id, type, payment_result, payment_result_msg, req_sn, 
    sn, create_time, create_by, update_time, update_by, totle_price, pay_way
  </sql>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from lease_scheme_repayment_status
        where id = #{id,jdbcType=BIGINT}
    </select>

    <!--  车牌号和扣款日期查询还款计划 -->
    <select id="findByPlateNumberAndRepaymentDate" resultMap="FindByPlateNumberAndRepaymentDateMap">
        select
        b.id "contractId", f.back_card_number "backCardNumber"
        , f.bank_phone "bankPhone"
        , COALESCE(j.price_limit,0) "priceLimit"
        , COALESCE(j.day_price_limit,0) "dayPriceLimit"
        , COALESCE(j.day_sum_limit,0) "daySumLimit"
        , (case when k.agrm_no is null then 0 else 1 end ) "isSign"
        , k.agrm_no "agrmNo"
        , l.id "repaymentId"
        , l.repayment_date "repaymentDate"
        , m.id "repaymentStatusId0"
        , n.id "repaymentStatusId2"
        , m.payment_result "paymentResult0"
        , n.payment_result "paymentResult2"
        , COALESCE(m.totle_price,0) "totlePrice0"
        , COALESCE(n.totle_price,0) "totlePrice2"
        , (SELECT value from lease_dict WHERE type='OverdueRate') "overdueRate"

        from lease_contract b
        INNER JOIN lease_scheme_order c on c.id = b.scheme_order_id
        INNER JOIN lease_car d on d.id = c.card_id and d.plate_number = #{plateNumber,jdbcType=VARCHAR}
        LEFT JOIN lease_scheme_order_account e on e.scheme_order_id = c.id and e.is_default_pay=1
        LEFT JOIN lease_account_bank_card f on f.id = e.bank_card_id
        LEFT JOIN lease_account g on g.id = e.account_id
        LEFT join lease_account_credit h on h.account_id=g.id
        LEFT JOIN lease_bank i on i.id = f.bank_id
        LEFT JOIN lease_bank_allinpay_price_limit j on i.id = j.bank_id
        LEFT JOIN lease_account_bank_pay_sin k on f.id = k.bank_card_id and g.id = k.account_id
        LEFT JOIN lease_scheme_repayment l on l.contract_id = b.id and l.repayment_date between #{repaymentDateBegin,jdbcType=TIMESTAMP} and #{repaymentDateEnd,jdbcType=TIMESTAMP}
        LEFT JOIN lease_scheme_repayment_status m on l.id = m.repayment_id and m.contract_id = b.id and m.type = 0 and (m.payment_result=0 or m.payment_result=3)
        LEFT JOIN lease_scheme_repayment_status n on l.id = n.repayment_id and n.contract_id = b.id and n.type = 2 and (n.payment_result=0 or n.payment_result=3)

        where 1=1

    </select>

    <!-- 查询某个合同某一期的某种款项的数据 -->
    <select id="findByType" resultMap="BaseResultMap" parameterType="java.util.Map">
        select

        id, repayment_id, contract_id, type, payment_result, payment_result_msg, req_sn,
        sn, totle_price, pay_way

        from lease_scheme_repayment_status
        where repayment_id = #{repaymentId,jdbcType=BIGINT}
        and contract_id = #{contractId,jdbcType=BIGINT}
        and type = #{type,jdbcType=INTEGER}

        and id in(select min(id) from lease_scheme_repayment_status where repayment_id = #{repaymentId,jdbcType=BIGINT} and contract_id = #{contractId,jdbcType=BIGINT} and type = #{type,jdbcType=INTEGER} group by repayment_id)

    </select>

    <!-- 需要轮询通联 的 交易流水/状态为扣款中 -->
    <select id="findQueryTradeNew" resultMap="findQueryTradeNewMap">
    select a.id, a.repayment_id "repaymentId", a.contract_id "contractId", a.payment_result "paymentResult",a.req_sn "reqSn", a.sn, a.type
    ,(CASE WHEN a.type = 2 then (SELECT aa.type from lease_overdue_log aa where aa.repayment_id = a.repayment_id and aa.contract_id = a.contract_id) END ) "overdueType"
    , a.pay_way "payWay"
    , b.status, b.id "allinpayLogId", b.single_or_batch "singleOrBatch"
    from lease_scheme_repayment_status a
    inner join lease_allinpay_log b on (a.id=b.repayment_status_id and b.create_time=(select max(c.create_time) from lease_allinpay_log c where a.id=c.repayment_status_id) and b.status=0)
    where 1=1
    and a.payment_result=1
    and (a.pay_way = 4 or a.pay_way = 9)
    and a.req_sn is not NULL
  </select>


    <!-- 查询月供、滞纳金的支付状态 -->
    <select id="selectByContract" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from lease_scheme_repayment_status
        where repayment_id = #{repaymentId,jdbcType=BIGINT} and contract_id = #{contractId,jdbcType=BIGINT} and type =
        #{type,jdbcType=INTEGER}
    </select>

    <!-- 合同是否还款完毕 -->
    <select id="findByContractidAndStatus" resultType="java.lang.Boolean">
        select (case when count(1) >0 then false else true end ) as "contractStatus"
        from lease_scheme_repayment_status
        where contract_id = #{contractId,jdbcType=BIGINT}
        and payment_result != 2
    </select>

    <!-- 合同是否存在还款中的还款计划 -->
    <select id="findContractPayStatusByContractId" resultType="java.lang.Boolean">
        select (case when count(1) >0 then true else false end ) as "contractStatus"
        from lease_scheme_repayment_status
        where contract_id = #{contractId,jdbcType=BIGINT}
        and payment_result = 1
    </select>

    <insert id="insertList">

        <selectKey keyProperty="id" resultType="Long" order="BEFORE">
            SELECT nextval('lease_scheme_repayment_status_id_seq'::regclass) as id
        </selectKey>

        insert into lease_scheme_repayment_status(id, repayment_id, contract_id,
        type, payment_result, payment_result_msg,
        req_sn, sn, create_time,
        create_by, update_time, update_by, totle_price, pay_way
        )
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (
            #{id},#{item.repaymentId},#{item.contractId},#{item.type}
            ,#{item.paymentResult},#{item.paymentResultMsg}
            ,#{item.reqSn},#{item.sn},#{item.createTime}
            ,#{item.createBy},#{item.updateTime},#{item.updateTime},#{item.totlePrice},#{item.payWay}
            )
        </foreach>

    </insert>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from lease_scheme_repayment_status
    where id = #{id,jdbcType=BIGINT}
  </delete>

    <delete id="deleteByContractId" parameterType="java.lang.Long">
        delete from lease_scheme_repayment_status
        where contract_id = #{id,jdbcType=BIGINT}
    </delete>

    <insert id="insert" parameterType="com.hc.lease.order.model.LeaseSchemeRepaymentStatus">
        <selectKey keyProperty="id" resultType="Long" order="BEFORE">
            SELECT nextval('lease_scheme_repayment_status_id_seq'::regclass) as id
        </selectKey>
        insert into lease_scheme_repayment_status (id, repayment_id, contract_id,
        type, payment_result, payment_result_msg,
        req_sn, sn, create_time,
        create_by, update_time, update_by, totle_price, pay_way
        )
        values (#{id,jdbcType=BIGINT}, #{repaymentId,jdbcType=BIGINT}, #{contractId,jdbcType=BIGINT},
        #{type,jdbcType=INTEGER}, #{paymentResult,jdbcType=INTEGER}, #{paymentResultMsg,jdbcType=VARCHAR},
        #{reqSn,jdbcType=VARCHAR}, #{sn,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP},
        #{createBy,jdbcType=BIGINT}, #{updateTime,jdbcType=TIMESTAMP},
        #{updateBy,jdbcType=BIGINT}, #{totlePrice,jdbcType=NUMERIC}, #{payWay,jdbcType=INTEGER}
        )
    </insert>
    <insert id="insertSelective" parameterType="com.hc.lease.order.model.LeaseSchemeRepaymentStatus">
        <selectKey keyProperty="id" resultType="Long" order="BEFORE">
            SELECT nextval('lease_scheme_repayment_status_id_seq'::regclass) as id
        </selectKey>
        insert into lease_scheme_repayment_status
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="repaymentId != null">
                repayment_id,
            </if>
            <if test="contractId != null">
                contract_id,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="paymentResult != null">
                payment_result,
            </if>
            <if test="paymentResultMsg != null">
                payment_result_msg,
            </if>
            <if test="reqSn != null">
                req_sn,
            </if>
            <if test="sn != null">
                sn,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="createBy != null">
                create_by,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="updateBy != null">
                update_by,
            </if>
            <if test="totlePrice != null">
                totle_price,
            </if>
            <if test="payWay != null">
                pay_way
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="repaymentId != null">
                #{repaymentId,jdbcType=BIGINT},
            </if>
            <if test="contractId != null">
                #{contractId,jdbcType=BIGINT},
            </if>
            <if test="type != null">
                #{type,jdbcType=INTEGER},
            </if>
            <if test="paymentResult != null">
                #{paymentResult,jdbcType=INTEGER},
            </if>
            <if test="paymentResultMsg != null">
                #{paymentResultMsg,jdbcType=VARCHAR},
            </if>
            <if test="reqSn != null">
                #{reqSn,jdbcType=VARCHAR},
            </if>
            <if test="sn != null">
                #{sn,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createBy != null">
                #{createBy,jdbcType=BIGINT},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateBy != null">
                #{updateBy,jdbcType=BIGINT},
            </if>
            <if test="totlePrice != null">
                #{totlePrice,jdbcType=NUMERIC},
            </if>
            <if test="payWay != null">
                #{payWay,jdbcType=INTEGER}
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.hc.lease.order.model.LeaseSchemeRepaymentStatus">
        update lease_scheme_repayment_status
        <set>
            <if test="repaymentId != null">
                repayment_id = #{repaymentId,jdbcType=BIGINT},
            </if>
            <if test="contractId != null">
                contract_id = #{contractId,jdbcType=BIGINT},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=INTEGER},
            </if>
            <if test="paymentResult != null">
                payment_result = #{paymentResult,jdbcType=INTEGER},
            </if>
            payment_result_msg = #{paymentResultMsg,jdbcType=VARCHAR},
            <if test="reqSn != null">
                req_sn = #{reqSn,jdbcType=VARCHAR},
            </if>
            <if test="sn != null">
                sn = #{sn,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createBy != null">
                create_by = #{createBy,jdbcType=BIGINT},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateBy != null">
                update_by = #{updateBy,jdbcType=BIGINT},
            </if>
            <if test="totlePrice != null">
                totle_price = #{totlePrice,jdbcType=NUMERIC},
            </if>
            <if test="payWay != null">
                pay_way = #{payWay,jdbcType=INTEGER}
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.hc.lease.order.model.LeaseSchemeRepaymentStatus">
    update lease_scheme_repayment_status
    set repayment_id = #{repaymentId,jdbcType=BIGINT},
      contract_id = #{contractId,jdbcType=BIGINT},
      type = #{type,jdbcType=INTEGER},
      payment_result = #{paymentResult,jdbcType=INTEGER},
      payment_result_msg = #{paymentResultMsg,jdbcType=VARCHAR},
      req_sn = #{reqSn,jdbcType=VARCHAR},
      sn = #{sn,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      update_by = #{updateBy,jdbcType=BIGINT},
      totle_price = #{totlePrice,jdbcType=NUMERIC},
      pay_way = #{payWay,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>

    <update id="updateByRepaymentId" parameterType="com.hc.lease.order.model.LeaseSchemeRepaymentStatus">
        update lease_scheme_repayment_status
        <set>
            <if test="repaymentId != null">
                repayment_id = #{repaymentId,jdbcType=BIGINT},
            </if>
            <if test="contractId != null">
                contract_id = #{contractId,jdbcType=BIGINT},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=INTEGER},
            </if>
            <if test="paymentResult != null">
                payment_result = #{paymentResult,jdbcType=INTEGER},
            </if>
            <if test="paymentResultMsg != null">
                payment_result_msg = #{paymentResultMsg,jdbcType=INTEGER},
            </if>
            <if test="reqSn != null">
                req_sn = #{reqSn,jdbcType=VARCHAR},
            </if>
            <if test="sn != null">
                sn = #{sn,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createBy != null">
                create_by = #{createBy,jdbcType=BIGINT},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateBy != null">
                update_by = #{updateBy,jdbcType=BIGINT},
            </if>
            <if test="totlePrice != null">
                totle_price = #{totlePrice,jdbcType=NUMERIC},
            </if>
            <if test="payWay != null">
                pay_way = #{payWay,jdbcType=INTEGER}
            </if>
        </set>
        where contract_id = #{contractId,jdbcType=BIGINT}
    </update>

    <update id="updateByContractIdAndType" parameterType="java.util.Map">
    update lease_scheme_repayment_status  set totle_price= #{total} where contract_id=#{contractId} and type=0
    </update>

    <!--批量更新-->
    <update id="batchUpdateByContract">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            update lease_scheme_repayment_status
            <set>
                payment_result = #{item.paymentResult},
                payment_result_msg = #{item.paymentResultMsg},
                pay_way = #{item.payWay},
                update_time = #{item.updateTime},
                update_by = #{item.updateBy}
                where repayment_id = #{item.repaymentId}
                and contract_id = #{item.contractId}
                and type = #{item.type,jdbcType=INTEGER}
            </set>
        </foreach>
    </update>

    <!-- 定时轮询通联超额拆分交易结果 批量更新 -->
    <update id="batchUpdateBySplitCheck">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            update lease_scheme_repayment_status
            <set>
                payment_result = #{item.paymentResult},
                payment_result_msg = #{item.paymentResultMsg}
                where repayment_id = #{item.repaymentId}
                and contract_id = #{item.contractId}
                and payment_result != 2
            </set>
        </foreach>
    </update>

    <!-- 备份数据 -->
    <insert id="backData">

        insert into lease_scheme_repayment_status_h
        (
        history_repayment_status_id, repayment_id, contract_id, totle_price, type, pay_way, payment_result, payment_result_msg, req_sn, sn
        ,history_create_time, history_update_time, history_create_by, history_update_by
        , create_time, update_time, create_by, update_by
        , vsersion_number
        )
        select
        id, repayment_id, contract_id, totle_price, type, pay_way , payment_result, payment_result_msg, req_sn, sn
        , create_time, update_time, create_by, update_by
        ,now(), now(), #{createBy,jdbcType=BIGINT}, #{updateBy,jdbcType=BIGINT}
        ,#{vsersionNumber,jdbcType=INTEGER}
        from lease_scheme_repayment_status where contract_id = #{contractId,jdbcType=BIGINT};

    </insert>

</mapper>