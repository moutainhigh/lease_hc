<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hc.lease.order.dao.LeaseSchemeRepaymentMapper">
    <resultMap id="BaseResultMap" type="com.hc.lease.order.model.LeaseSchemeRepayment">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="contract_id" property="contractId" jdbcType="BIGINT"/>
        <result column="lessee_id" property="lesseeId" jdbcType="BIGINT"/>
        <result column="period" property="period" jdbcType="BIGINT"/>
        <result column="return_principal" property="returnPrincipal" jdbcType="NUMERIC"/>
        <result column="return_interest" property="returnInterest" jdbcType="NUMERIC"/>
        <result column="total" property="total" jdbcType="NUMERIC"/>
        <result column="residual_principal" property="residualPrincipal" jdbcType="NUMERIC"/>
        <result column="repayment_date" property="repaymentDate" jdbcType="DATE"/>
        <result column="overdue" property="overdue" jdbcType="SMALLINT"/>
        <result column="overdue_day" property="overdueDay" jdbcType="INTEGER"/>
        <result column="payment_result" property="paymentResult" jdbcType="SMALLINT"/>
        <result column="payment_result_msg" property="paymentResultMsg" jdbcType="VARCHAR"/>
        <result column="loan_amount" property="loanAmount" jdbcType="NUMERIC"/>
        <result column="annual_interest" property="annualInterest" jdbcType="NUMERIC"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <result column="create_by" property="createBy" jdbcType="BIGINT"/>
        <result column="update_by" property="updateBy" jdbcType="BIGINT"/>
        <result column="is_send_payment" property="isSendPayment" jdbcType="INTEGER"/>

        <result column="staging_number" property="stagingNumber" jdbcType="INTEGER"/>

        <result column="contract_number" property="contractNumber" jdbcType="VARCHAR"/>
        <result column="account_real_name" property="accountRealName" jdbcType="VARCHAR"/>
        <result column="back_card_number" property="backCardNumber" jdbcType="VARCHAR"/>
        <result column="id_card" property="idCard" jdbcType="VARCHAR"/>
        <result column="bank_name" property="bankName" jdbcType="VARCHAR"/>
        <result column="company_name" property="companyName" jdbcType="VARCHAR"/>
        <result column="province_id" property="provinceId" jdbcType="BIGINT"/>
        <result column="city_id" property="cityId" jdbcType="BIGINT"/>
        <result column="province_name" property="provinceName" jdbcType="VARCHAR"/>
        <result column="city_name" property="cityName" jdbcType="VARCHAR"/>
        <result column="total_count" property="totalCount" jdbcType="NUMERIC"/>
        <result column="item_count" property="itemCount" jdbcType="INTEGER"/>

    </resultMap>

    <sql id="Base_Column_List">
    id, contract_id, lessee_id, period, return_principal, return_interest, total, residual_principal, 
    repayment_date, overdue, overdue_day, payment_result, payment_result_msg, loan_amount, annual_interest, create_time,
    update_time, create_by, update_by, is_send_payment
  </sql>

    <!---->
    <select id="selectContract" resultMap="BaseResultMap">
        select
        a.contract_id "contractId"
        ,g.value "stagingNumber", a.period
        from lease_scheme_repayment a
        INNER JOIN lease_contract b on a.contract_id = b.id
        INNER JOIN lease_scheme_order c on b.scheme_order_id = c.id
        INNER JOIN lease_scheme d on c.scheme_id = d.id
        INNER JOIN lease_scheme_package e on e.scheme_id = d.id
        INNER JOIN lease_package f on e.package_id = f.id
        INNER JOIN lease_dict g on f.staging_number_id = g.id and g.type='StagingNumber'
        where a.id = #{id,jdbcType=BIGINT}
    </select>

    <select id="selectByContractId" resultMap="BaseResultMap" parameterType="java.lang.Long">
    select repayment_date,contract_id,total,period
    from lease_scheme_repayment
    where contract_id = #{contractId}
    </select>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from lease_scheme_repayment
        where id = #{id,jdbcType=BIGINT}
    </select>

    <select id="selectByIsSendPayment" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from lease_scheme_repayment
        where is_send_payment = #{isSendPayment,jdbcType=INTEGER}
    </select>

    <!--融租合同的 月供的还款记录-->
    <select id="findIsMonthLog" resultMap="BaseResultMap">
        select

        id, contract_id "contractId", lessee_id "lesseeId", total, repayment_date "repaymentDate", overdue_day "overdueDay"

        from lease_scheme_repayment
        where is_send_payment = 0
        and (payment_result = 0 or payment_result = 3)
        and (overdue = 1 or repayment_date &gt; now())

        <if test="contractId != null">
            and contract_id = #{contractId,jdbcType=BIGINT}
        </if>

    </select>

    <!--融租合同的 已逾期的还款记录-->
    <select id="findIsOverdueLog" resultMap="BaseResultMap">
    select

    id, contract_id "contractId", lessee_id "lesseeId", round(total, 2) "total", repayment_date "repaymentDate", overdue_day "overdueDay"

    from lease_scheme_repayment
    where (payment_result = 0 or payment_result = 3)
    and (overdue = 0 or repayment_date &lt; now())

    <if test="contractId != null">
        and contract_id = #{contractId,jdbcType=BIGINT}
    </if>

  </select>

    <!--单笔代收 检测是否是月供-->
    <select id="checkIsMonth" resultMap="BaseResultMap">

        select

        a.contract_id "contractId"
        ,round(a.total, 2) "total"
        ,e.real_name "accountRealName"
        ,e.name "accountName"
        , f.back_card_number "backCardNumber"
        ,g.name "bankName",g.code "bankCode"

        from lease_scheme_repayment a

        INNER JOIN lease_contract b on a.contract_id = b.id
        INNER JOIN lease_scheme_order c on c.id = b.scheme_order_id
        INNER JOIN lease_scheme_order_account d on d.scheme_order_id = c.id and d.is_default_pay = 1
        INNER JOIN lease_account e on e.id = d.account_id
        LEFT JOIN lease_account_credit f on e.id = f.account_id
        LEFT JOIN lease_bank g on g.id = f.bank_id

        where a.id = #{id,jdbcType=BIGINT}
        and a.is_send_payment = 0
        and (a.payment_result = 0 or a.payment_result = 3)
        and (a.overdue = 1 or a.repayment_date &gt; now())

    </select>

    <!--单笔代收 检测是否是逾期-->
    <select id="checkIsOverdue" resultMap="BaseResultMap">

        select
        a.contract_id "contractId"
        ,round(a.total, 2) "total"
        ,e.real_name "accountRealName"
        ,e.name "accountName"
        , f.back_card_number "backCardNumber"
        ,g.name "bankName",g.code "bankCode"

        from lease_scheme_repayment a

        INNER JOIN lease_contract b on a.contract_id = b.id
        INNER JOIN lease_scheme_order c on c.id = b.scheme_order_id
        INNER JOIN lease_scheme_order_account d on d.scheme_order_id = c.id and d.is_default_pay = 1
        INNER JOIN lease_account e on e.id = d.account_id
        LEFT JOIN lease_account_credit f on e.id = f.account_id
        LEFT JOIN lease_bank g on g.id = f.bank_id

        where a.id = #{id,jdbcType=BIGINT}
        and (payment_result = 0 or payment_result = 3)
        and (overdue = 0 or repayment_date &lt; now())

    </select>

    <!--查询所有月供 批量扣款 统计城市-->
    <select id="findAllMonthStatisticsByCity" resultMap="BaseResultMap">

        select h.city_id "cityId", i.name "provinceName", j.name "cityName", round(sum(b.total), 2) "totalCount"

        from lease_contract a

        INNER JOIN lease_scheme_repayment b on b.contract_id = a.id and b.repayment_date = #{repaymentDate,jdbcType=TIMESTAMP}
        INNER JOIN lease_scheme_order c on c.id = a.scheme_order_id
        LEFT JOIN lease_branch_company h on h.id = a.branch_company_id
        LEFT JOIN lease_area i on i.id = h.province_id
        LEFT JOIN lease_area j on j.id = h.city_id

        where 1=1
        and b.is_send_payment = 0
        and (b.payment_result = 0 or b.payment_result = 3)
        and (b.overdue = 1 or b.repayment_date &gt; now())

        group by h.city_id,j.name,i.name,j.name;

    </select>

    <!--查询所有月供 批量扣款 统计-->
    <select id="findAllMonthStatistics" resultType="java.util.Map">

        select case WHEN (sum(table_a.total)) IS NULL THEN 0 ELSE (round(sum(table_a.total), 2)) END "totalCount", count(1) "itemCount" from (
        select b.total

        from lease_contract a

        INNER JOIN lease_scheme_repayment b on b.contract_id = a.id and b.repayment_date = #{repaymentDate,jdbcType=TIMESTAMP}
        INNER JOIN lease_scheme_order c on c.id = a.scheme_order_id
        LEFT JOIN lease_branch_company h on h.id = a.branch_company_id
        LEFT JOIN lease_area i on i.id = h.province_id
        LEFT JOIN lease_area j on j.id = h.city_id

        where 1=1
        and b.is_send_payment = 0
        and (b.payment_result = 0 or b.payment_result = 3)
        and (b.overdue = 1 or b.repayment_date &gt; now())
        ) table_a

    </select>

    <!--查询所有月供 批量扣款明细列表-->
    <select id="findAllMonth" resultType="java.util.Map">

        select
        a.id "contractId", ('HC融租字'||a.contract_number_year||'年第'||a.contract_number||'号') "contractNumber"
        , round(b.total, 2) total, b.id, b.period
        ,e.real_name "accountRealName"
        , f.back_card_number "backCardNumber"
        ,f.id_card "idCard"
        ,g.name "bankName"
        ,h.name "companyName"
        ,i.id "provinceId"
        ,j.id "cityId"
        ,i.name "provinceName"
        ,j.name "cityName"

        from lease_contract a

        INNER JOIN lease_scheme_repayment b on b.contract_id = a.id and b.repayment_date = #{repaymentDate,jdbcType=TIMESTAMP}
        INNER JOIN lease_scheme_order c on c.id = a.scheme_order_id
        INNER JOIN lease_scheme_order_account d on d.scheme_order_id = c.id and d.is_default_pay=1
        INNER JOIN lease_account e on e.id = d.account_id
        LEFT JOIN lease_account_credit f on e.id = f.account_id
        LEFT JOIN lease_bank g on g.id = f.bank_id
        LEFT JOIN lease_branch_company h on h.id = a.branch_company_id
        LEFT JOIN lease_area i on i.id = h.province_id
        LEFT JOIN lease_area j on j.id = h.city_id

        where 1=1
        and b.is_send_payment = 0
        and (b.payment_result = 0 or b.payment_result = 3)
        and (b.overdue = 1 or b.repayment_date &gt; now())

    </select>


    <!--查出 批量扣款 的数据-->
    <select id="batchCheckIsMonth" resultMap="BaseResultMap">

        select

        a.id, a.contract_id "contractId"
        ,round(a.total, 2) "total"
        ,e.real_name "accountRealName"
        ,e.name "accountName"
        , f.back_card_number "backCardNumber"
        ,g.name "bankName",g.code "bankCode"

        from lease_scheme_repayment a

        INNER JOIN lease_contract b on a.contract_id = b.id
        INNER JOIN lease_scheme_order c on c.id = b.scheme_order_id
        INNER JOIN lease_scheme_order_account d on d.scheme_order_id = c.id and d.is_default_pay = 1
        INNER JOIN lease_account e on e.id = d.account_id
        LEFT JOIN lease_account_credit f on e.id = f.account_id
        LEFT JOIN lease_bank g on g.id = f.bank_id

        where a.id in
        <foreach item="item" index="index" collection="repaymentIds" open="(" separator="," close=")">
            #{item}
        </foreach>
        and a.is_send_payment = 0
        and (a.payment_result = 0 or a.payment_result = 3)
        and (a.overdue = 1 or a.repayment_date &gt; now())

    </select>


    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from lease_scheme_repayment
    where id = #{id,jdbcType=BIGINT}
  </delete>

    <delete id="deleteByContractId" parameterType="java.lang.Long">
    delete from lease_scheme_repayment
    where contract_id = #{id,jdbcType=BIGINT}

  </delete>

    <insert id="insert" parameterType="com.hc.lease.order.model.LeaseSchemeRepayment">
        <selectKey keyProperty="id" resultType="Long" order="BEFORE">
            SELECT nextval('lease_scheme_repayment_id_seq'::regclass) as id
        </selectKey>
    insert into lease_scheme_repayment (id, contract_id, lessee_id, 
      period, return_principal, return_interest, 
      total, residual_principal, repayment_date, 
      overdue, overdue_day, payment_result, payment_result_msg,
      loan_amount, annual_interest, create_time,
      update_time, create_by, update_by, is_send_payment)
    values (#{id,jdbcType=BIGINT}, #{contractId,jdbcType=BIGINT}, #{lesseeId,jdbcType=BIGINT}, 
      #{period,jdbcType=BIGINT}, #{returnPrincipal,jdbcType=NUMERIC}, #{returnInterest,jdbcType=NUMERIC}, 
      #{total,jdbcType=NUMERIC}, #{residualPrincipal,jdbcType=NUMERIC}, #{repaymentDate,jdbcType=DATE}, 
      #{overdue,jdbcType=SMALLINT}, #{overdueDay,jdbcType=INTEGER}, #{paymentResult,jdbcType=SMALLINT}, #{paymentResult,jdbcType=VARCHAR},
      #{loanAmount,jdbcType=NUMERIC}, #{annualInterest,jdbcType=NUMERIC}, #{createTime,jdbcType=TIMESTAMP},
      #{updateTime,jdbcType=TIMESTAMP}, #{createBy,jdbcType=BIGINT}, #{updateBy,jdbcType=BIGINT}, #{isSendPayment,jdbcType=INTEGER}
      )
  </insert>

    <insert id="insertSelective" parameterType="com.hc.lease.order.model.LeaseSchemeRepayment">
        <selectKey keyProperty="id" resultType="Long" order="BEFORE">
            SELECT nextval('lease_scheme_repayment_id_seq'::regclass) as id
        </selectKey>
        insert into lease_scheme_repayment
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="contractId != null">
                contract_id,
            </if>
            <if test="lesseeId != null">
                lessee_id,
            </if>
            <if test="period != null">
                period,
            </if>
            <if test="returnPrincipal != null">
                return_principal,
            </if>
            <if test="returnInterest != null">
                return_interest,
            </if>
            <if test="total != null">
                total,
            </if>
            <if test="residualPrincipal != null">
                residual_principal,
            </if>
            <if test="repaymentDate != null">
                repayment_date,
            </if>
            <if test="overdue != null">
                overdue,
            </if>
            <if test="overdueDay != null">
                overdue_day,
            </if>
            <if test="paymentResult != null">
                payment_result,
            </if>
            <if test="paymentResultMsg != null">
                payment_result_msg,
            </if>
            <if test="loanAmount != null">
                loan_amount,
            </if>
            <if test="annualInterest != null">
                annual_interest,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="createBy != null">
                create_by,
            </if>
            <if test="updateBy != null">
                update_by,
            </if>
            <if test="isSendPayment != null">
                is_send_payment
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="contractId != null">
                #{contractId,jdbcType=BIGINT},
            </if>
            <if test="lesseeId != null">
                #{lesseeId,jdbcType=BIGINT},
            </if>
            <if test="period != null">
                #{period,jdbcType=BIGINT},
            </if>
            <if test="returnPrincipal != null">
                #{returnPrincipal,jdbcType=NUMERIC},
            </if>
            <if test="returnInterest != null">
                #{returnInterest,jdbcType=NUMERIC},
            </if>
            <if test="total != null">
                #{total,jdbcType=NUMERIC},
            </if>
            <if test="residualPrincipal != null">
                #{residualPrincipal,jdbcType=NUMERIC},
            </if>
            <if test="repaymentDate != null">
                #{repaymentDate,jdbcType=DATE},
            </if>
            <if test="overdue != null">
                #{overdue,jdbcType=SMALLINT},
            </if>
            <if test="overdueDay != null">
                #{overdueDay,jdbcType=INTEGER},
            </if>
            <if test="paymentResult != null">
                #{paymentResult,jdbcType=SMALLINT},
            </if>
            <if test="paymentResultMsg != null">
                #{paymentResultMsg,jdbcType=VARCHAR},
            </if>
            <if test="loanAmount != null">
                #{loanAmount,jdbcType=NUMERIC},
            </if>
            <if test="annualInterest != null">
                #{annualInterest,jdbcType=NUMERIC},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createBy != null">
                #{createBy,jdbcType=BIGINT},
            </if>
            <if test="updateBy != null">
                #{updateBy,jdbcType=BIGINT},
            </if>
            <if test="isSendPayment != null">
                #{isSendPayment,jdbcType=INTEGER}
            </if>

        </trim>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.hc.lease.order.model.LeaseSchemeRepayment">
        update lease_scheme_repayment
        <set>
            <if test="contractId != null">
                contract_id = #{contractId,jdbcType=BIGINT},
            </if>
            <if test="lesseeId != null">
                lessee_id = #{lesseeId,jdbcType=BIGINT},
            </if>
            <if test="period != null">
                period = #{period,jdbcType=BIGINT},
            </if>
            <if test="returnPrincipal != null">
                return_principal = #{returnPrincipal,jdbcType=NUMERIC},
            </if>
            <if test="returnInterest != null">
                return_interest = #{returnInterest,jdbcType=NUMERIC},
            </if>
            <if test="total != null">
                total = #{total,jdbcType=NUMERIC},
            </if>
            <if test="residualPrincipal != null">
                residual_principal = #{residualPrincipal,jdbcType=NUMERIC},
            </if>
            <if test="repaymentDate != null">
                repayment_date = #{repaymentDate,jdbcType=DATE},
            </if>
            <if test="overdue != null">
                overdue = #{overdue,jdbcType=SMALLINT},
            </if>
            <if test="overdueDay != null">
                overdue_day = #{overdueDay,jdbcType=INTEGER},
            </if>
            <if test="paymentResult != null">
                payment_result = #{paymentResult,jdbcType=SMALLINT},
            </if>
            <if test="paymentResultMsg != null">
                payment_result_msg = #{paymentResultMsg,jdbcType=VARCHAR},
            </if>
            <if test="loanAmount != null">
                loan_amount = #{loanAmount,jdbcType=NUMERIC},
            </if>
            <if test="annualInterest != null">
                annual_interest = #{annualInterest,jdbcType=NUMERIC},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createBy != null">
                create_by = #{createBy,jdbcType=BIGINT},
            </if>
            <if test="updateBy != null">
                update_by = #{updateBy,jdbcType=BIGINT},
            </if>
            <if test="isSendPayment != null">
                is_send_payment = #{isSendPayment,jdbcType=INTEGER}
            </if>

        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <update id="updateByPrimaryKey" parameterType="com.hc.lease.order.model.LeaseSchemeRepayment">
    update lease_scheme_repayment
    set contract_id = #{contractId,jdbcType=BIGINT},
      lessee_id = #{lesseeId,jdbcType=BIGINT},
      period = #{period,jdbcType=BIGINT},
      return_principal = #{returnPrincipal,jdbcType=NUMERIC},
      return_interest = #{returnInterest,jdbcType=NUMERIC},
      total = #{total,jdbcType=NUMERIC},
      residual_principal = #{residualPrincipal,jdbcType=NUMERIC},
      repayment_date = #{repaymentDate,jdbcType=DATE},
      overdue = #{overdue,jdbcType=SMALLINT},
      overdue_day = #{overdueDay,jdbcType=INTEGER},
      payment_result = #{paymentResult,jdbcType=SMALLINT},
      payment_result_msg = #{paymentResultMsg,jdbcType=VARCHAR},
      loan_amount = #{loanAmount,jdbcType=NUMERIC},
      annual_interest = #{annualInterest,jdbcType=NUMERIC},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=BIGINT},
      update_by = #{updateBy,jdbcType=BIGINT},
      is_send_payment = #{isSendPayment,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>

    <!--批量更新-->
    <update id="batchUpdate" parameterType="java.util.List">

        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            update lease_scheme_repayment
            <set>
                overdue = ${item.overdue},
                overdue_day = ${item.overdueDay}
            </set>
            where id = ${item.id}
        </foreach>

    </update>

</mapper>