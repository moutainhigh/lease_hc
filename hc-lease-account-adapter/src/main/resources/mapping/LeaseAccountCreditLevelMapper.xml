<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hc.lease.account.dao.LeaseAccountCreditLevelMapper">
    <!--承租人评级列表-->
    <resultMap id="AccountCreditLevelVo" type="com.hc.lease.account.vo.AccountCreditLevelVo">
        <id column="account_id" property="accountId" jdbcType="BIGINT"/>
        <result column="account_name" property="accountName" jdbcType="VARCHAR"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="company_name" property="companyName" jdbcType="VARCHAR"/>
        <result column="times" property="times" jdbcType="INTEGER"/>
        <result column="days" property="days" jdbcType="INTEGER"/>
        <result column="level" property="level" jdbcType="NUMERIC"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <resultMap id="BaseResultMap" type="com.hc.lease.account.model.LeaseAccountCreditLevel">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="account_id" jdbcType="BIGINT" property="accountId"/>
        <result column="level" jdbcType="VARCHAR" property="level"/>
        <result column="remark" jdbcType="VARCHAR" property="remark"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    </resultMap>
    <sql id="Base_Column_List">
        id, account_id, level, remark, update_time, create_time
    </sql>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from lease_account_credit_level
        where id = #{id,jdbcType=BIGINT}
    </select>

    <select id="findAccountId" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from lease_account_credit_level
        where account_id = #{accountId,jdbcType=BIGINT}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete from lease_account_credit_level
        where id = #{id,jdbcType=BIGINT}
    </delete>

    <!-- 批量删除 -->
    <delete id="deleteBatchById" parameterType="long">
        delete from lease_account_credit_level where id in
        <foreach item="idItem" collection="list" open="(" separator="," close=")">
            #{idItem}
        </foreach>
    </delete>

    <insert id="insert" parameterType="com.hc.lease.account.model.LeaseAccountCreditLevel" useGeneratedKeys="true"
            keyProperty="id">
        insert into lease_account_credit_level (id, account_id, level,
        remark, update_time, create_time
        )
        values (#{id,jdbcType=BIGINT}, #{accountId,jdbcType=BIGINT}, #{level,jdbcType=VARCHAR},
        #{remark,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP}
        )
    </insert>

    <insert id="insertSelective" parameterType="com.hc.lease.account.model.LeaseAccountCreditLevel"
            useGeneratedKeys="true" keyProperty="id">
        insert into lease_account_credit_level
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="accountId != null">
                account_id,
            </if>
            <if test="level != null">
                level,
            </if>
            <if test="remark != null">
                remark,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="accountId != null">
                #{accountId,jdbcType=BIGINT},
            </if>
            <if test="level != null">
                #{level,jdbcType=VARCHAR},
            </if>
            <if test="remark != null">
                #{remark,jdbcType=VARCHAR},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.hc.lease.account.model.LeaseAccountCreditLevel">
        update lease_account_credit_level
        <set>
            <if test="accountId != null">
                account_id = #{accountId,jdbcType=BIGINT},
            </if>
            <if test="level != null">
                level = #{level,jdbcType=VARCHAR},
            </if>
            <if test="remark != null">
                remark = #{remark,jdbcType=VARCHAR},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <update id="updateByPrimaryKey" parameterType="com.hc.lease.account.model.LeaseAccountCreditLevel">
        update lease_account_credit_level
        set account_id = #{accountId,jdbcType=BIGINT},
        level = #{level,jdbcType=VARCHAR},
        remark = #{remark,jdbcType=VARCHAR},
        update_time = #{updateTime,jdbcType=TIMESTAMP},
        create_time = #{createTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=BIGINT}
    </update>

    <select id="findAccountCreditLevel" parameterType="com.hc.lease.account.vo.FindAccountCreditLevelVo"
            resultMap="AccountCreditLevelVo">
        WITH _overdue(lessee_id, company_name, times, days) as
        (
        SELECT
        a.lessee_id
        ,string_agg(DISTINCT c.name, ',') company_name
        ,COUNT(a.overdue) times
        ,SUM(a.overdue_day) days
        FROM lease_scheme_repayment a
        JOIN lease_contract b ON b.id = a.contract_id
        JOIN lease_branch_company c ON c.id = b.branch_company_id
        WHERE 1=1
        and a.overdue = 0
        GROUP BY
        a.lessee_id
        )

        SELECT
        a.id account_id
        ,a.name account_name
        ,a.create_time
        ,a.phone
        ,c.company_name
        ,c.times
        ,c.days
        ,b.level
        FROM lease_account a
        LEFT JOIN lease_account_credit_level b ON b.account_id = a.id
        LEFT JOIN _overdue c ON c.lessee_id = a.id

        WHERE 1=1
        <if test="accountNameOrPhone != null">
            AND (a.name LIKE CONCAT('%',#{accountNameOrPhone},'%') OR a.phone LIKE
            CONCAT('%',#{accountNameOrPhone},'%'))
        </if>
        <if test="startTime != null and finishTime != null">
            AND a.create_time BETWEEN #{startTime} AND #{finishTime}
        </if>
        <if test="level != null">
            <choose>
                <when test="level !=''">
                    AND b.level = #{level}
                </when>
                <otherwise>
                    AND b.level IS NULL
                </otherwise>
            </choose>
        </if>
        <if test="minTimes != null">
            AND c.times &gt;= #{minTimes}
        </if>
        <if test="maxTimes != null">
            AND c.times &lt;= #{maxTimes}
        </if>
        <if test="companyName != null">
            AND c.company_name = #{companyName}
        </if>

        ORDER BY a.create_time DESC
    </select>
</mapper>